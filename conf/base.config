/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnachrom Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.


    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}

// PROCESSES  --------------------------------------------------------------------------------
// Set which process directories to publish, prefixes
process {
    withName: FASTQC {
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/QC/FastQC" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: MULTIQC  {
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/QC/MultiQC" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: FASTUNIQ {
        ext.args     = { "${flags.fastuniq}" }
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Deduplicate_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: FASTQ_DUPAWAY {
        ext.args     =  { "${flags.fastq_dupaway}" }
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Deduplicate_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: TRIMMOMATIC {
        ext.args     =  { "${flags.trimmomatic}" }
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Trimm_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: FASTP {
        ext.args     =  { "${flags.fastp}" }
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Trimm_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: PEAR {
        ext.args     =  { "${flags.pear}" }
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/OverlapMergePE_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: BBMAP_BBMERGE {
        ext.args     = ''
        ext.prefix   = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/OverlapMergePE_fastq" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: HISAT2_ALIGN {
        time = 48.h
        ext.args     = '--no-softclip -k 100 --no-discordant --no-mixed --no-spliced-alignment'
        ext.args_rna = { ${flags.hisat_rna} } ? { ${flags.hisat_rna} } : '--no-softclip --dta-cufflinks -k 100'
        ext.args_dna = { ${flags.hisat_dna} } ? { ${flags.hisat_dna} } : '--no-softclip -k 100 --no-spliced-alignment'
        ext.prefix = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Align_bam" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: STAR_ALIGN {
        time = 48.h
        ext.args     = { "${flags.star}" }
        ext.args_rna = { "${flags.star_rna}" } ? { "${flags.star_rna}" } : '--outSAMstrandField intronMotif  --outSAMattributes All   --outSAMtype BAM SortedByCoordinate '
        ext.args_dna = { "${flags.star_dna}" } ? { "${flags.star_dna}" } : '--outSAMstrandField intronMotif  --outSAMattributes All   --outSAMtype BAM SortedByCoordinate '
        ext.prefix = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Align_bam" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }


    withName: BWA_MEM {
        time = 48.h
        ext.args     = { "${flags.bwa_mem}" }
        ext.args2     = '-F 256'
        ext.prefix = { "${meta.prefix}" }
    }
    
    withName: BOWTIE2_ALIGN {
        time = 48.h
        ext.args     = ''
        ext.prefix = { "${meta.prefix}" }
        publishDir = [
            [   path: { "${params.outdir}/Align_bam" },
                mode: params.publish_dir_mode,
                pattern: "*"
            ]
        ]
    }

    withName: BAM_FILTER {
        ext.args     = { "${flags.bam_filter}" }
        ext.prefix = { "${input.baseName}.filtered" }
        publishDir = [
            [   
                //specify to avoid publishing, overwritten otherwise
                enabled: false
            ]
        ]
    }

    withName: BEDTOOLS_BAMTOBED {
        ext.args     = "-cigar"
        ext.prefix = { "${bam.baseName.split('.filtered')[0]}" }
        publishDir = [
            [   
                //specify to avoid publishing, overwritten otherwise
                enabled: false
            ]
        ]
    }


}

params {
       // MultiQC options
    multiqc_config              = null
    multiqc_title               = null
    multiqc_logo                = null
    max_multiqc_email_size      = '25.MB'
    multiqc_methods_description = null

    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null
    
    
    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true
    igenomes_base               = 'https://ngi-igenomes.s3.amazonaws.com/igenomes'
    igenomes_ignore             = false
}



// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig 'test.config'      }
    test_full { includeConfig 'test_full.config' }
}

// email settings
// mail {
//   from = 'info@nextflow.io'
//   smtp.host = 'smtp.sendgrid.net'
//   smtp.port = 587
//   smtp.user = "apikey"
//   smtp.password = "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"
//   smtp.auth = true
//   smtp.starttls.enable = true
//   smtp.starttls.required = true
// }

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.



// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/rnachrom'
    author          = """Ivan Ilnitskiy"""
    homePage        = 'https://github.com/nf-core/rnachrom'
    description     = """RNA-DNA interactome processing"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


    // withLabel:process_low {
    //   cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    //   memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    //   time = { check_max( 6.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_medium {
    //   cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    //   memory = 10.GB
    //   time = { check_max( 8.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_high {
    //   cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    //   memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    //   time = { check_max( 10.h * task.attempt, 'time' ) }
    // }   